{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7981839,"sourceType":"datasetVersion","datasetId":3202774}],"dockerImageVersionId":30886,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:44:00.576556Z","iopub.execute_input":"2025-02-15T16:44:00.576753Z","iopub.status.idle":"2025-02-15T16:44:01.186378Z","shell.execute_reply.started":"2025-02-15T16:44:00.576729Z","shell.execute_reply":"2025-02-15T16:44:01.185285Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/usa-real-estate-dataset/realtor-data.zip.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Load the dataset\ndf = pd.read_csv(\"/kaggle/input/usa-real-estate-dataset/realtor-data.zip.csv\")\n\n# Display basic info\nprint(df.info())\nprint(df.head())\n\n# Check for missing values\nprint(\"\\nMissing Values Before Handling:\")\nprint(df.isnull().sum())\n\n# Fill missing numerical values with median\ndf.fillna(df.median(numeric_only=True), inplace=True)\n\n# Remove infinite values if present\ndf.replace([np.inf, -np.inf], np.nan, inplace=True)\n\n# Check for missing values after handling\nprint(\"\\nMissing Values After Handling:\")\nprint(df.isnull().sum())\n\n# Verify that all numeric columns have valid values\nnumeric_cols = df.select_dtypes(include=['number']).columns\nprint(\"\\nSummary of Numeric Columns:\")\nprint(df[numeric_cols].describe())\n\n# Feature Scaling\nscaler = StandardScaler()\ndf[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n\n# Ensure no NaN values remain after scaling\ndf.dropna(inplace=True)\n\nprint(\"\\nDataset Successfully Processed!\")\nprint(df.info())\nprint(df.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:47:35.909339Z","iopub.execute_input":"2025-02-15T16:47:35.909651Z","iopub.status.idle":"2025-02-15T16:47:41.397323Z","shell.execute_reply.started":"2025-02-15T16:47:35.909624Z","shell.execute_reply":"2025-02-15T16:47:41.395422Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2226382 entries, 0 to 2226381\nData columns (total 12 columns):\n #   Column          Dtype  \n---  ------          -----  \n 0   brokered_by     float64\n 1   status          object \n 2   price           float64\n 3   bed             float64\n 4   bath            float64\n 5   acre_lot        float64\n 6   street          float64\n 7   city            object \n 8   state           object \n 9   zip_code        float64\n 10  house_size      float64\n 11  prev_sold_date  object \ndtypes: float64(8), object(4)\nmemory usage: 203.8+ MB\nNone\n   brokered_by    status     price  bed  bath  acre_lot     street  \\\n0     103378.0  for_sale  105000.0  3.0   2.0      0.12  1962661.0   \n1      52707.0  for_sale   80000.0  4.0   2.0      0.08  1902874.0   \n2     103379.0  for_sale   67000.0  2.0   1.0      0.15  1404990.0   \n3      31239.0  for_sale  145000.0  4.0   2.0      0.10  1947675.0   \n4      34632.0  for_sale   65000.0  6.0   2.0      0.05   331151.0   \n\n         city        state  zip_code  house_size prev_sold_date  \n0    Adjuntas  Puerto Rico     601.0       920.0            NaN  \n1    Adjuntas  Puerto Rico     601.0      1527.0            NaN  \n2  Juana Diaz  Puerto Rico     795.0       748.0            NaN  \n3       Ponce  Puerto Rico     731.0      1800.0            NaN  \n4    Mayaguez  Puerto Rico     680.0         NaN            NaN  \n\nMissing Values Before Handling:\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"name":"stdout","text":"brokered_by         4533\nstatus                 0\nprice               1541\nbed               481317\nbath              511771\nacre_lot          325589\nstreet             10866\ncity                1407\nstate                  8\nzip_code             299\nhouse_size        568484\nprev_sold_date    734297\ndtype: int64\n\nMissing Values After Handling:\nbrokered_by            0\nstatus                 0\nprice                  0\nbed                    0\nbath                   0\nacre_lot               0\nstreet                 0\ncity                1407\nstate                  8\nzip_code               0\nhouse_size             0\nprev_sold_date    734297\ndtype: int64\n\nSummary of Numeric Columns:\n        brokered_by         price           bed          bath      acre_lot  \\\ncount  2.226382e+06  2.226382e+06  2.226382e+06  2.226382e+06  2.226382e+06   \nmean   5.293978e+04  5.240576e+05  3.216207e+00  2.382325e+00  1.303481e+01   \nstd    3.061154e+04  2.138159e+06  1.392195e+00  1.465217e+00  7.048619e+02   \nmin    0.000000e+00  0.000000e+00  1.000000e+00  1.000000e+00  0.000000e+00   \n25%    2.399100e+04  1.650000e+05  3.000000e+00  2.000000e+00  1.700000e-01   \n50%    5.288400e+04  3.250000e+05  3.000000e+00  2.000000e+00  2.600000e-01   \n75%    7.917000e+04  5.500000e+05  4.000000e+00  3.000000e+00  6.800000e-01   \nmax    1.101420e+05  2.147484e+09  4.730000e+02  8.300000e+02  1.000000e+05   \n\n             street      zip_code    house_size  \ncount  2.226382e+06  2.226382e+06  2.226382e+06  \nmean   1.012327e+06  5.218617e+04  2.470757e+03  \nstd    5.823372e+05  2.895217e+04  6.973942e+05  \nmin    0.000000e+00  0.000000e+00  4.000000e+00  \n25%    5.088252e+05  2.961700e+04  1.456000e+03  \n50%    1.012766e+06  4.838200e+04  1.760000e+03  \n75%    1.518663e+06  7.807000e+04  2.140000e+03  \nmax    2.001357e+06  9.999900e+04  1.040400e+09  \n\nDataset Successfully Processed!\n<class 'pandas.core.frame.DataFrame'>\nIndex: 1491747 entries, 411 to 2226381\nData columns (total 12 columns):\n #   Column          Non-Null Count    Dtype  \n---  ------          --------------    -----  \n 0   brokered_by     1491747 non-null  float64\n 1   status          1491747 non-null  object \n 2   price           1491747 non-null  float64\n 3   bed             1491747 non-null  float64\n 4   bath            1491747 non-null  float64\n 5   acre_lot        1491747 non-null  float64\n 6   street          1491747 non-null  float64\n 7   city            1491747 non-null  object \n 8   state           1491747 non-null  object \n 9   zip_code        1491747 non-null  float64\n 10  house_size      1491747 non-null  float64\n 11  prev_sold_date  1491747 non-null  object \ndtypes: float64(8), object(4)\nmemory usage: 148.0+ MB\nNone\n      brokered_by    status     price       bed      bath  acre_lot    street  \\\n411     -0.021880  for_sale -0.209132 -0.155300 -0.260934 -0.018124  1.478106   \n502      1.280799  for_sale -0.193651  2.717861  0.421559 -0.018365  1.425942   \n1025    -0.007604  for_sale -0.170735 -0.155300 -0.260934 -0.018124  1.107623   \n1160     0.456110  for_sale -0.067375 -0.155300 -0.260934  0.093104  1.529056   \n2270     1.371810  for_sale  0.199210  1.281281  1.104052 -0.017088  0.426121   \n\n              city           state  zip_code  house_size prev_sold_date  \n411      Canovanas     Puerto Rico -1.777317   -0.001822     2020-02-28  \n502         Dorado     Puerto Rico -1.769718   -0.001834     2019-06-28  \n1025        Caguas     Puerto Rico -1.777455   -0.001213     2021-09-15  \n1160       Yabucoa     Puerto Rico -1.776004   -0.001019     2021-03-15  \n2270  Saint Thomas  Virgin Islands -1.774795    0.003627     2013-10-11  \n","output_type":"stream"}],"execution_count":5}]}
