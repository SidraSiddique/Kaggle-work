{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "64fb6bda-cff7-42fb-9774-de2ad2132a01",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.datasets import load_diabetes, fetch_california_housing\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "\n",
    "# Load datasets\n",
    "diabetes = load_diabetes()\n",
    "california = fetch_california_housing()\n",
    "\n",
    "# Convert them into dataframes\n",
    "diabetes_df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)\n",
    "california_df = pd.DataFrame(california.data, columns=california.feature_names)\n",
    "\n",
    "# Add target column\n",
    "diabetes_df['target'] = diabetes.target\n",
    "california_df['target'] = california.target\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ef4707b3-7a39-4a5e-aeb2-284386405096",
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_data(df):\n",
    "    X = df.drop('target', axis=1)\n",
    "    y = df['target']\n",
    "    return train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "X_train_diabetes, X_test_diabetes, y_train_diabetes, y_test_diabetes = split_data(diabetes_df)\n",
    "X_train_california, X_test_california, y_train_california, y_test_california = split_data(california_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9a509b53-15b5-49f9-b78f-5ed468599ff9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_svm(X_train, X_test, y_train, y_test):\n",
    "    model = SVR()\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    return y_pred\n",
    "\n",
    "y_pred_diabetes_svm = train_svm(X_train_diabetes, X_test_diabetes, y_train_diabetes, y_test_diabetes)\n",
    "y_pred_california_svm = train_svm(X_train_california, X_test_california, y_train_california, y_test_california)\n",
    "\n",
    "def train_decision_tree(X_train, X_test, y_train, y_test):\n",
    "    model = DecisionTreeRegressor(random_state=42)\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    return y_pred\n",
    "\n",
    "y_pred_diabetes_tree = train_decision_tree(X_train_diabetes, X_test_diabetes, y_train_diabetes, y_test_diabetes)\n",
    "y_pred_california_tree = train_decision_tree(X_train_california, X_test_california, y_train_california, y_test_california)\n",
    "\n",
    "def train_random_forest(X_train, X_test, y_train, y_test):\n",
    "    model = RandomForestRegressor(random_state=42)\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    return y_pred\n",
    "\n",
    "y_pred_diabetes_rf = train_random_forest(X_train_diabetes, X_test_diabetes, y_train_diabetes, y_test_diabetes)\n",
    "y_pred_california_rf = train_random_forest(X_train_california, X_test_california, y_train_california, y_test_california)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f7433b2d-7e46-4374-9977-9880b061325b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Metrics (Diabetes): (4333.285954518086, 56.02372412801096, 0.18211365770500287)\n",
      "SVM Metrics (California): (1.3320115421348744, 0.8599506583445758, -0.01648536010717372)\n",
      "Decision Tree Metrics (Diabetes): (4976.797752808989, 54.52808988764045, 0.060653981041140725)\n",
      "Decision Tree Metrics (California): (0.495235205629094, 0.45467918846899225, 0.622075845135081)\n",
      "Random Forest Metrics (Diabetes): (2952.0105887640448, 44.053033707865175, 0.4428225673999313)\n",
      "Random Forest Metrics (California): (0.2553684927247781, 0.32754256845930246, 0.8051230593157366)\n"
     ]
    }
   ],
   "source": [
    "def evaluate_model(y_test, y_pred):\n",
    "    mse = mean_squared_error(y_test, y_pred)\n",
    "    mae = mean_absolute_error(y_test, y_pred)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    return mse, mae, r2\n",
    "\n",
    "metrics_diabetes_svm = evaluate_model(y_test_diabetes, y_pred_diabetes_svm)\n",
    "metrics_california_svm = evaluate_model(y_test_california, y_pred_california_svm)\n",
    "\n",
    "metrics_diabetes_tree = evaluate_model(y_test_diabetes, y_pred_diabetes_tree)\n",
    "metrics_california_tree = evaluate_model(y_test_california, y_pred_california_tree)\n",
    "\n",
    "metrics_diabetes_rf = evaluate_model(y_test_diabetes, y_pred_diabetes_rf)\n",
    "metrics_california_rf = evaluate_model(y_test_california, y_pred_california_rf)\n",
    "\n",
    "print(\"SVM Metrics (Diabetes):\", metrics_diabetes_svm)\n",
    "print(\"SVM Metrics (California):\", metrics_california_svm)\n",
    "\n",
    "print(\"Decision Tree Metrics (Diabetes):\", metrics_diabetes_tree)\n",
    "print(\"Decision Tree Metrics (California):\", metrics_california_tree)\n",
    "\n",
    "print(\"Random Forest Metrics (Diabetes):\", metrics_diabetes_rf)\n",
    "print(\"Random Forest Metrics (California):\", metrics_california_rf)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64b7a5f3-61b6-45f0-ad25-a11c1f7c7bed",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9e69384-0fe4-4cff-b29c-01ec03284790",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
